{
  "projects": [
    {
      "id": "blocklang-extension",
      "title": "BlockLang Browser Extension",
      "category": "Browser Extension",
      "client": "Personal Project",
      "date": "June 2025 ",
      "url": "https://blocklang.org",
      "description": "A powerful browser extension for Chrome, Firefox, and Safari that helps users filter unwanted content and remove distracting websites from search results.",
      "projectOverview": "BlockLang is a sophisticated cross-platform browser extension (Chrome, Firefox, Safari) that implements advanced real-time search result filtering using dual-architecture approach: DOM manipulation with MutationObserver API and URL query modification. Built with vanilla JavaScript ES6+ and Chrome Extension Manifest V3, the extension features comprehensive CSS selector targeting, intelligent URL parsing, and client-side filter management using Chrome Storage API. The technical implementation includes service worker background scripts, content script injection, and responsive UI with dark/light theme support. The project has future plans for evolution into a SaaS platform with planned backend implementation (PHP/Symfony + MySQL) to enable Pro subscriptions with cross-device synchronization, user accounts, and premium filtering features - addressing the limitation that App Stores don't support paid extensions. This full-stack expansion will demonstrate end-to-end product development from browser extension to complete SaaS business model.",
      "motivations": {"title": "Why I Even Started This", "description": "As someone who spends a lot of time online searching for information, I was constantly annoyed by the same old problems. When I searched for something in Bulgarian, Google often gave me results in Russian – they sound similar enough, but the content was completely irrelevant and just wasted my time. The other big issue was this constant \"noise\" from clickbait sites and fake news, which just cluttered up my search feed and made finding quality information pretty frustrating. I wanted something discreet that would filter this out without getting in my way."},
      "problems": {"title": "What I Did and How I Grew It", "description": "To solve my own problem, I decided to build a browser extension. I started with a Chrome version, just to see if the idea worked and if it made sense. Once I saw how much it helped me, I decided to expand it for people who, like me, use Apple devices – so I made it for Safari on macOS and iOS."},
      "challenges": {"title": "The Biggest Hurdles and How I Got Around Them", "description": "The hardest part was making sure the browsers wouldn't mistake it for an ad-blocker, because its function is quite different. I focused on making the design super clean, but at the same time very functional – easy and intuitive to use, without interfering with the browsing experience"},
      "technical-details": {"title": "Technologies I Used", "description": "I picked up some experience with Xcode and Swift back when I was working with Smule on a social network project. Plus, I'd actually built an iOS game using C++ and Cocos2d-x, so I was pretty familiar with just how serious a tool Xcode is when you're building Apple applications.\n\nFor all three browsers – Chrome, Firefox, and Safari – I stuck with vanilla JavaScript (ES6+) and the standard Web Extensions API. I chose this approach because it ensures maximum compatibility across all the different browser ecosystems, meaning I didn't need any external libraries. The Chrome version uses the Manifest V3 architecture with service workers, Firefox handles both Manifest V2/V3 depending on compatibility needs, and Safari follows its own specific Web Extensions implementation. The key is that all versions share the same core code for manipulating the DOM and using storage APIs for user preferences.\n\nThe extension itself is built with a dual-architecture approach: I use DOM manipulation with the MutationObserver API for real-time updates, and URL query modification for persistent filtering. I went with this because it gives you both immediate visual results and makes sure your filters stick even when pages reload. Technically, this involved precise targeting with CSS selectors for element identification and intelligent URL parsing for query enhancement.\n\nFor managing filters on the client-side, I used the Chrome Storage API to keep user preferences consistent across browser sessions. This was super important because users shouldn't have to reconfigure their filters every single time. The extension's UI is built using HTML5, CSS3, and JavaScript, featuring a responsive design that also supports dark/light themes – handy since people browse at different times of the day.\n\nI also implemented service worker background scripts for Chrome's Manifest V3 requirements and content script injection for a really smooth integration with web pages that doesn't interfere with the browsing experience.\n\nLooking ahead to the future SaaS platform, my plan is to use PHP 8.1 with the Symfony 7.2 framework for the backend. I'll leverage MySQL for data storage and implement full user authentication and subscription management features. This approach will let me get around the limitation of App Stores not supporting paid extensions, allowing me to build a complete SaaS business model."},
      "results": {"title": "The Result, In Short", "description": "While developing it, I realized I probably wasn't the only one with this problem. That motivated me to broaden the extension's reach, making it available for Firefox, and soon for Brave, in addition to the existing Chrome and Safari versions.\n\nNow, the BlockLang Extension is available for download from the Apple App Stores (macOS & iOS), Chrome Web Store, and Firefox Browser ADD-ONS. If you want to see all the details about how it works, its use cases, and so on, you can check out the dedicated website: <a href=\"https://blocklang.org\" target=\"_blank\">www.blocklang.org</a>."},
      "feedback": {"title": "What other people says", "description": "The feedback I'm getting from users is awesome. Once they set their filters, they pretty much forget it's even there – it just works quietly in the background, and the result is immediately visible: a much cleaner and more relevant search feed. They often tell me that it's only when they have to use a search engine on a work computer without BlockLang that they truly realize how much \"junk\" and irrelevant information my extension has been filtering out."},
      "technologies": ["JavaScript", "Web Extensions API", "Safari Extensions", "Chrome Extensions", "Firefox Add-ons"],
      "features": [
        "Instantly Clean Search Results - Automatically removes unwanted domains and languages from Google and Bing searches",
        "Complete Privacy Protection - 100% offline operation with zero data collection or tracking",
        "Custom Filtering Control - Add your own domain and language filters with simple text input (no technical syntax required)",
        "One-Click Toggle - Enable or disable filtering instantly without losing your custom settings",
        "Cross-Platform Compatibility - Works seamlessly on Chrome, Firefox, Edge, and Safari across desktop and mobile",
        "Smart Default Filters - Pre-configured to block common spam domains and irrelevant content out of the box",
        "Real-Time Query Enhancement - Automatically appends exclusion filters to search queries for immediate results",
        "User-Friendly Interface - Simple popup design with visual feedback for adding/removing filters"
      ],
      "descriptions": [
        "Domain and website blocking",
        "Cross-platform browser support (Chrome)",
        "Cross-platform browser support (Firefox)",
        "Cross-platform browser support (Safari macOS)",
        "Cross-platform browser support (Safari iOS iPad)",
        "Cross-platform browser support (Safari iOS iPhone over 5 incs)",
        "Cross-platform browser support (Safari iOS iPhone 5 incs)"
      ],
      "images": [
        "assets/img/portfolio/blocklang-ex/blocklang_main.png",
        "assets/img/portfolio/blocklang-ex/blocklang-chrome-5.png",
        "assets/img/portfolio/blocklang-ex/blocklang-firefox-3.png",
        "assets/img/portfolio/blocklang-ex/blocklang-safari-mac-13.png",
        "assets/img/portfolio/blocklang-ex/blocklang-safari-ios-1.png",
        "assets/img/portfolio/blocklang-ex/blocklang-safari-ios-2.png",
        "assets/img/portfolio/blocklang-ex/blocklang-safari-ios-3.png"
      ],
      "filter": "filter-extension"
    },
    {
      "id": "body-language-org",
      "title": "Body-Language.org Website",
      "category": "Web Development",
      "client": "Personal Project",
      "date": "March 2025",
      "url": "https://body-language.org",
      "description": "A comprehensive website dedicated to body language education and analysis, featuring interactive content and educational resources.",
      "projectOverview": "Body-Language.org is a comprehensive web application built with modern PHP 8.1 and Symfony 7.2 framework that explores the symbolic meaning behind human gestures, postures, and non-verbal communication. The platform combines psychology, anatomy, and cultural insights to help users understand body language interpretation. Architecturally, it leverages Doctrine ORM 3.3 for advanced database management, EasyAdmin 4.24 for content administration, and implements robust security with Symfony Security Bundle. The application features multilingual support (Bulgarian/English), user authentication system, content management workflows with editor roles, and automated cleanup tasks via Symfony Messenger. Additional technical implementations include CORS handling with Nelmio bundles, KNP Paginator for performance optimization, and comprehensive logging with Monolog. This project demonstrates full-stack PHP development expertise with modern Symfony ecosystem integration and scalable web application architecture.",
      "motivations": {"title": "Why I Even Started This", "description": "The idea for this site sparked after a body language course. The sheer volume of information to remember, learn, and consider was overwhelming. During practice sessions, I constantly found myself digging through notes, trying to recall \"what did this mean again?\" or \"what was that gesture for?\". That's when I thought of logging all the meanings in a spreadsheet. I added keywords, and soon, other people wanted access to my notes too. This made me realize a Google Sheet wasn't the most convenient solution for a quick reference. I clearly needed something more interactive and easily accessible."},
      "problems": {"title": "What I Did and How I Grew It", "description": "It became obvious that a website was the way to go. But what kind? Since I had experience with PHP and MySQL, I decided to stick with what I knew best and build it using those technologies. However, I quickly realized that plain PHP would soon limit the project's scalability and future expansion. Also, managing data entry and subsequent processing directly through phpMyAdmin wasn't feasible. So, I introduced a user role system: regular users, editors with rights to input and edit data, and an administrator to manage accounts.\n\nThen came the idea for users to report irregularities or suggest improvements, which required implementing an internal messaging system. With that, it became clear that a registration and login system was necessary so each user could have their assigned role. All these requirements led me to choose Symfony."},
      "challenges": {"title": "The Biggest Hurdles and How I Got Around Them", "description": "The trickiest part was the data organization itself and designing the database tables. I solved this by using separate tables for categories, subcategories, keywords, and postures, linked together with foreign keys to avoid data duplication. As I introduced registration and login, I also implemented email confirmation via a link, a \"forgot password\" feature, password changes from the user panel, and all the other standard functionalities modern websites offer for user convenience."},
      "technical-details": {"title": "Technologies I Used", "description": "Like I mentioned, the project is built with PHP 8.1, and I specifically went with the Symfony 7.2 Framework. I picked it because I knew it's a modern, really robust framework that could handle all the complexity I was planning. For templating, I used Twig, and for the admin panel – handling users, admins, editors, and all that – I leveraged EasyAdmin 4.24. That saved me a ton of time building out the admin interface.\n\nFor the database, I chose MySQL since I'm most familiar with it, and it's super reliable for this type of content-heavy application. I used Doctrine ORM 3.3 for database abstraction, which was crucial for properly organizing all the body language data – with all its relationships between categories, subcategories, and gestures.\n\nFor sending emails (like registration links, password changes/resets, confirmations, and contact forms for admins), I used Symfony Mailer. That, in turn, required setting up Cron Jobs with Symfony Messenger for automatically cleaning up the database from expired links and other temporary data.\n\nI also made sure to build in strong security; I implemented robust measures with the Symfony Security Bundle and added CORS handling using Nelmio bundles. I wanted the site to be API-ready for future integrations, so that was important. For performance optimization, especially when displaying large amounts of data, I used the KNP Paginator bundle for efficient pagination.\n\nMultilingual support came pretty naturally with Symfony's own translation components, making the site accessible to non-Bulgarian speakers too. I also added comprehensive logging with Monolog to keep an eye on user interactions and system performance."},
      "results": {"title": "The Result, In Short", "description": "As a result of all this, I ended up with a pretty functional and user-friendly website with a lightweight interface. My only minor critique is that I might not have chosen the most suitable template for optimal user experience (UX), and I plan to work on improving that in the future. If you want to see how it works, you can check out the dedicated website: <a href=\"https://body-language.org\" target=\"_blank\">www.body-language.org</a>."},
      "feedback": {"title": "What other people says", "description": "I haven't widely distributed the site, so I haven't received extensive public feedback. However, the small group of people who do use it find it very useful and functional – which was exactly the goal of the project."},
      "technologies": ["PHP", "MySQL", "JavaScript", "Symfony", "Doctrine", "Bootstrap", "HTML/CSS", "EasyAdmin"],
      "features": [
        "Modern Symfony 7.2 Architecture - Latest PHP 8.1+ framework with Doctrine ORM 3.3 for robust database abstraction",
        "Advanced Content Management - EasyAdmin 4.24 bundle for intuitive admin interface and content workflows",
        "Multilingual Platform - Full Bulgarian/English localization with Symfony translation components",
        "User Authentication System - Comprehensive user registration, login, and role-based access control",
        "Editor Workflow Management - Dedicated editor inbox for reviewing user-submitted feedback and content moderation",
        "Performance Optimization - KNP Paginator bundle for efficient data pagination and memory management",
        "Security Implementation - Nelmio Security Bundle with CORS support and comprehensive security headers",
        "Automated Task Processing - Symfony Messenger for background jobs and automated cleanup operations",
        "Responsive Frontend Design - Bootstrap 5 with Twig templating engine for cross-device compatibility"
      ],
      "descriptions": [
        "Multi-column data tables for various data types",
        "Multilingual database system",
        "Multilingual UI system",
        "Dynamic data display models",
        "Simplified data display system for small datasets",
        "Admin panel with user management capabilities",
        "Role management system with admin privileges",
        "Editor role for content management",
        "Internal messaging system"
      ],
      "images": [
        "assets/img/portfolio/body-language/body-language-1.png",
        "assets/img/portfolio/body-language/body-language-2.png",
        "assets/img/portfolio/body-language/body-language-3.png",
        "assets/img/portfolio/body-language/body-language-4.png",
        "assets/img/portfolio/body-language/body-language-5.png",
        "assets/img/portfolio/body-language/body-language-6.png",
        "assets/img/portfolio/body-language/body-language-7.png",
        "assets/img/portfolio/body-language/body-language-8.png",
        "assets/img/portfolio/body-language/body-language-9.png"
      ],
      "filter": "filter-web"
    },
    {
      "id": "blocklang-website",
      "title": "BlockLang.org Website",
      "category": "Web Development",
      "client": "Personal Project", 
      "date": "June 2025",
      "url": "https://blocklang.org",
      "description": "The official website for BlockLang browser extension, featuring download links, documentation, and user support.",
      "projectOverview": "BlockLang.org is a comprehensive static website built for GitHub Pages that serves as the official landing page and business hub for the BlockLang browser extension. Developed to meet App Store compliance requirements, the site features GDPR/CCPA-compliant privacy policies, Apple Standard EULA terms of use, and comprehensive legal documentation required for multi-platform app distribution. The website implements a dynamic content management system using JSON-driven architecture with URL parameter-based routing, enabling platform-specific installation guides for Safari (iOS/macOS), Chrome, and Firefox. Built with Bootstrap 5.3.3 and enhanced with modern JavaScript libraries (AOS animations, Typed.js, Swiper.js, GLightbox), the site demonstrates proficiency in static site development, business compliance requirements, and user experience design. Additional features include FormSubmit.co integration for contact forms, multi-platform screenshot galleries, video tutorials, and SEO optimization - showcasing end-to-end web development skills from technical implementation to business requirement fulfillment.",
      "motivations": {"title": "Why I Even Started This", "description": "To get the BlockLang application listed on various App Stores (Apple, Chrome, Firefox), I needed to meet a set of requirements. This included having a privacy policy, terms of use, and a centralized place with detailed information on how the app works, what problems it solves, and how users can install and configure it. I also needed space for illustrative images, videos, and a clear way for users to contact me as the developer. So, I decided to create a dedicated website to consolidate all this information and simultaneously satisfy platform requirements."},
      "problems": {"title": "What I Did and How I Grew It", "description": "The main challenge was figuring out exactly what each App Store required. Every platform had different documentation standards and legal requirements. I also had to figure out how to explain complex installation processes in a simple way that wouldn't confuse users, especially for Safari iOS where the process is quite different from Chrome."},
      "challenges": {"title": "The Biggest Hurdles and How I Got Around Them", "description": "The main challenge was figuring out how to effectively visualize all this information. Since it was purely an informational site with no need for a complex backend, the key was choosing the most suitable frontend template. Ultimately, I settled on a ready-made, licensed template. After acquiring it, I populated it with the content I had prepared and further expanded it to include all the necessary sections for a proper product presentation."},
      "technical-details": {"title": "Technologies I Used", "description": "For the website's foundation, I utilized a licensed, off-the-shelf template, which I fully customized to meet my specific needs. The site is built with HTML, CSS, and JavaScript, and I leveraged Bootstrap for its responsive design and robust components, ensuring a professional look across all devices.\n\nFor the contact form, I integrated an external service (FormSubmit.co), which allowed me to have a functional form on a static site without needing a backend, complete with built-in spam protection. I also developed a JSON-based architecture with URL parameters to provide platform-specific installation instructions tailored for different browsers (Safari, Chrome, Firefox).\n\nI optimized the entire site for hosting on GitHub Pages with custom domain support, ensuring fast loading times and reliability. I paid close attention to SEO and performance, implementing a mobile-first design, font optimization, and proper meta tags to ensure good search engine ranking and quick load times."},
      "results": {"title": "The Result, In Short", "description": "As a result of this process, I now have a beautiful, clean, and functional website. It's incredibly useful for users, providing comprehensive information about the BlockLang project. The site includes separate, clearly defined sections for the Privacy Policy, Terms of Use, How it Works, How to Use, Downloads, and a direct contact option for the developer. You can explore it at: <a href=\"https://blocklang.org\" target=\"_blank\">www.blocklang.org</a>.."},
      "feedback": {"title": "What other people says", "description": "The general feedback I've received is that the website is intuitive and useful, which was my primary goal when creating it."},
      "technologies": ["HTML/CSS", "JavaScript", "Bootstrap", "Form Integration"],
      "features": [
        "App Store Compliance Framework - GDPR/CCPA privacy policies, Apple EULA integration, and legal documentation required for multi-platform distribution",
        "Dynamic Content Management - JSON-driven architecture with URL parameter routing for platform-specific installation guides",
        "Multi-Platform Documentation - Comprehensive guides for Safari (iOS/macOS), Chrome, and Firefox with screenshot galleries and video tutorials",
        "Professional UI Implementation - Bootstrap 5.3.3 with AOS animations, Typed.js effects, Swiper carousels, and GLightbox galleries",
        "Contact Form Integration - FormSubmit.co external service integration with anti-spam protection and branded email templates",
        "GitHub Pages Optimization - Static site architecture optimized for direct GitHub Pages deployment with custom domain support",
        "SEO & Performance - Mobile-first responsive design, Google Fonts optimization, meta tags, and performance-optimized assets",
        "Business Requirements Integration - Subscription pricing documentation, auto-renewal terms, and comprehensive customer support structure",
        "Cross-Browser Compatibility - Progressive enhancement approach ensuring functionality across all modern browsers and mobile devices"
      ],
      "descriptions":  [
        "Official website for BlockLang browser extension",
        "Comprehensive installation guides",
        "Privacy Policy and Terms of Use",
        "Multi-platform download center",
        "Links to App Stores",
        "Interactive feature demonstrations",
        "Contact form integration",
        "Responsive design",
        "Performance optimized"
      ],
      "images": [
        "assets/img/portfolio/blocklang-site/blocklang-site-1.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-2.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-3.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-4.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-5.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-6.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-8.png",
        "assets/img/portfolio/blocklang-site/blocklang-site-9.png"
      ],
      "filter": "filter-web"
    },
    {
      "id": "scam-checker",
      "title": "BlockLang Scam Checker",
      "category": "Web Application",
      "client": "Personal Project",
      "date": "October 2025",
      "url": "https://app.blocklang.org",
      "description": "A comprehensive web-based security scanner that analyzes websites for potential scams, phishing attempts, and security threats in real-time.",
      "projectOverview": "BlockLang Scam Checker (app.blocklang.org) is a full-stack web security application built with modern TypeScript/Node.js backend and vanilla JavaScript frontend. The platform implements a sophisticated multi-API security analysis system, aggregating threat intelligence from Google Safe Browsing API, VirusTotal API, and Cloudflare Radar API to deliver comprehensive domain security reports with scoring algorithms. The backend architecture leverages Express.js with TypeScript, Supabase PostgreSQL for caching and analytics, and Resend API for transactional emails. Key technical implementations include reCAPTCHA v3 bot protection, rate limiting with IP-based throttling, CORS security, user report verification system with email confirmation, and automated database cleanup via cron jobs. The frontend features a modern gradient UI with real-time security visualization, blog content for SEO, FAQ system, and comprehensive legal pages (Privacy Policy, Terms of Use). This project demonstrates end-to-end full-stack development expertise including REST API integration, database design, email workflows, security best practices, and production deployment on Vercel with custom domain configuration.",
      "motivations": {"title": "Why I Even Started This", "description": "As the BlockLang browser extension grew, users started asking if there was a way to check if a website was safe before even visiting it. Many people wanted a quick, simple tool to verify links they received via email or social media. I realized there was a gap in the market for a free, easy-to-use scam checker that didn't require technical knowledge or browser extensions. I wanted to build something that anyone could use directly from their browser, without installing anything."},
      "problems": {"title": "What I Did and How I Grew It", "description": "I started by researching which security APIs were available and reliable. I chose to combine multiple sources - Google Safe Browsing, VirusTotal, and Cloudflare Radar - because relying on a single source wouldn't give the full picture. I built a backend API that queries all these services and aggregates the results into a simple security score. The challenge was making this complex data easy to understand for non-technical users, so I designed a color-coded scoring system (green for safe, yellow for warnings, red for dangerous)."},
      "challenges": {"title": "The Biggest Hurdles and How I Got Around Them", "description": "The biggest challenge was handling API rate limits and costs. Free tiers of security APIs are quite restrictive, so I implemented aggressive caching using Supabase to store domain check results for 7 days. This reduced API calls by over 80%. Another major hurdle was preventing abuse - I needed reCAPTCHA v3 for bot protection and IP-based rate limiting to stop automated scraping. The user reporting system was also complex - I had to build an entire email verification workflow to prevent spam reports, including database cleanup for expired verification tokens."},
      "technical-details": {"title": "Technologies I Used", "description": "The backend is built with Node.js and TypeScript using Express.js framework. I chose TypeScript because it catches bugs early with type checking, which is crucial when working with multiple external APIs. For the database, I went with Supabase (PostgreSQL) because it offers a generous free tier and built-in real-time capabilities. I use it for caching domain security results, storing user reports, and tracking analytics.\n\nFor security API integrations, I implemented adapters for Google Safe Browsing API v4, VirusTotal API v3, and Cloudflare Radar API. Each API has different response formats, so I normalized the data into a unified scoring system. The scoring algorithm weighs different threat indicators and calculates a final security score from 0-100.\n\nTo prevent abuse, I integrated reCAPTCHA v3 with a development bypass token for local testing. I also implemented custom rate limiting middleware with IP-based throttling using in-memory storage. CORS is configured to only allow requests from specific origins (blocklang.org domains and localhost for development).\n\nFor the user reporting system, I built a complete email verification workflow using Resend API. When users report a false positive/negative, they receive a verification email with a unique token. The token expires after 24 hours, and I use cron jobs to automatically clean up expired tokens from the database. This prevents database bloat and ensures data privacy.\n\nThe frontend is intentionally simple - vanilla JavaScript ES6+ with no frameworks. I wanted fast page loads and minimal dependencies. The UI uses CSS gradients, responsive design, and modern web standards. I added a blog section for SEO purposes with articles about online scams and security tips.\n\nFor deployment, I chose Vercel for the backend API because it supports serverless functions and has excellent TypeScript support. The frontend is also hosted on Vercel with custom domain configuration. I implemented comprehensive logging with custom logger utilities for debugging and monitoring production issues."},
      "results": {"title": "The Result, In Short", "description": "The result is a fast, reliable security scanner that anyone can use to check if a website is safe. Users simply enter a domain and get instant results with a clear security score and detailed threat analysis. The site includes a blog with educational content about online scams, an FAQ section answering common questions, and legal pages (Privacy Policy, Terms of Use) required for GDPR compliance. The reporting system allows users to flag incorrect results, which helps improve accuracy over time. You can try it yourself at: <a href=\"https://app.blocklang.org\" target=\"_blank\">app.blocklang.org</a>."},
      "feedback": {"title": "What other people says", "description": "Early users appreciate how fast and simple it is to use. They particularly like the color-coded scoring system because it gives them an instant visual answer to \"is this site safe?\" without having to read technical jargon. The email verification system for reports initially caused some confusion due to slow email delivery (Resend's email forwarding can be delayed), but once users understand they need to check their email, the workflow makes sense and prevents spam effectively."},
      "technologies": ["TypeScript", "Node.js", "Express.js", "Supabase", "PostgreSQL", "JavaScript", "HTML/CSS", "Resend API", "Google Safe Browsing API", "VirusTotal API", "Cloudflare Radar API"],
      "features": [
        "Multi-API Security Analysis - Aggregates threat intelligence from Google Safe Browsing, VirusTotal, and Cloudflare Radar APIs",
        "Intelligent Scoring Algorithm - Calculates comprehensive security scores (0-100) based on weighted threat indicators",
        "Advanced Caching System - Supabase PostgreSQL database with 7-day TTL reduces API costs by 80%+",
        "Bot Protection - reCAPTCHA v3 integration with development bypass for local testing",
        "Rate Limiting - IP-based throttling with in-memory storage to prevent API abuse",
        "User Reporting System - Email verification workflow for false positive/negative reports with 24-hour token expiry",
        "Automated Database Cleanup - Cron jobs for expired token removal and data maintenance",
        "CORS Security - Strict origin validation with support for production and development environments",
        "Real-Time Security Visualization - Color-coded UI (green/yellow/red) for instant threat assessment",
        "Educational Blog - SEO-optimized content about online scams, phishing, and security best practices",
        "GDPR Compliance - Complete Privacy Policy and Terms of Use with legal disclaimers"
      ],
      "descriptions": [
        "Real-time domain security scanning",
        "Multi-source threat intelligence aggregation",
        "Color-coded security scoring system",
        "User report verification with email confirmation",
        "Comprehensive caching for performance",
        "Blog with scam prevention education",
        "FAQ section for common questions",
        "Privacy Policy and Terms of Use",
        "Responsive mobile-first design"
      ],
      "images": [
        "assets/img/portfolio/blocklang-scam/blocklang-scam-1.png",
        "assets/img/portfolio/blocklang-scam/blocklang-scam-2.png",
        "assets/img/portfolio/blocklang-scam/blocklang-scam-3.png",
        "assets/img/portfolio/blocklang-scam/blocklang-scam-4.png",
        "assets/img/portfolio/blocklang-scam/blocklang-scam-5.png",
        "assets/img/portfolio/blocklang-scam/blocklang-scam-6.png"
      ],
      "filter": "filter-web"
    }
  ]
}